From 5d08963fccfc255b6811144fa0358ed04a1187eb Mon Sep 17 00:00:00 2001
From: Kevin Liao <kevinliao2003>
Date: Fri, 1 Mar 2024 13:09:49 -0500
Subject: [PATCH] app and graph changes

---
 src/App.tsx   | 26 ++++++++++++++++++++------
 src/Graph.tsx | 17 +++++++++++++----
 2 files changed, 33 insertions(+), 10 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..505ae68 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ // updates graph every time data is retrieved from the server
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+
+      x++;
+      if (x > 1000) { // clears server after 1000 calls have been made
+        clearInterval(interval);
+      }
+    }, 100); // intervals of 100
+
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..e64ff40 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -46,10 +46,19 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
-      // Add more Perspective configurations here.
       elem.load(this.table);
     }
+
+    // Builds the table.
+    elem.setAttribute('view', 'y_line'); // y_line: continuous line graph
+    elem.setAttribute('column-pivots', '["stock"]'); // distinguish between stock
+    elem.setAttribute('row-pivots', '["timestamp"]'); // x-axis is timestamp
+    elem.setAttribute('columns', '["top_ask_price"]'); // y-axis is price
+    elem.setAttribute('aggregates', // handles duplicated data
+      `{"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"}`);
   }
 
   componentDidUpdate() {
-- 
2.42.0.windows.2

